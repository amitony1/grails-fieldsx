h2. f:input

_f:input_ renders an appropriate input for a property, for example an @<input type="text">@ element for a _String_ property or a @<select>@ for an enum. Using _f:input_ directly will only be necessary for very specialized cases, usually it will be invoked via _f:field_.

h2. f:field

_f:field_ renders the input using either _f:input_ or the tag body accompanied by any surrounding markup, typically a container, a _label_ tag and any validation messages. By default the _f:field_ tag will output:

{code}
<div class="fieldcontain">
    <label for="foo">Foo</label>
    <!-- the input as generated by f:input or the tag body -->
</div>
{code}

Typically the intention is that _f:field_ should be used _without_ a tag body. For example:

{code}
<f:field bean="person" property="name"/>
{code}

In which case the tag will use _f:input_ to generate an appropriate input. Alternatively in more specialized cases you can give _f:field_ a tag body. For example:

{code}
<f:field bean="person" property="name">
    <g:textField name="${property}" value="${value}"/>
</f:field>
{code}

See [Overriding Templates|guide:3. Overriding Templates] for details of the parameters passed to the tag body.

h3. Attributes

Both _f:input_ and _f:field_ share the same exact set of attributes:

{table}
*Name* | *Required?* | *Description*
*bean* | yes for _f:input_ if not inside _f:with_, optional for _f:field_ | The bean whose property is being rendered. This can be the object itself or the name of a page-scope variable.
*property* | yes | The path to the property. This can include any level of nesting and numeric or string indexes. For example @employees\[0\].address\[home\].street@ is a valid path.
*value* | | Overrides the actual value of the property.
*default* | | A default value for the property that will be used if the actual property value is _falsy_.
*required* | | Overrides the required status of the property. By default this is worked out based on the property's constraints.
*invalid* | | Overrides the validity of the property. By default this is worked out using the bean's _errors_ property for domain and command objects.
*label* | | Overrides the field label passed to the template.
*labelKey* | | Overrides the field label passed to the template using a message from an i18n bundle.
{table}

h2. f:all

Renders fields for all properties of an object by using _f:field_ for each property.

The _id_, _version_, _dateCreated_ and _lastUpdated_ properties are skipped on domain classes.

Embedded properties are included with a surrounding _fieldset_. For example if you have a _Person_ class with a _name_ property and an _Address_ embedded class with _street_, _city_ and _country_ properties @<f:all bean="person">@ will effectively do this:

{code}
<f:field bean="person" property="name"/>
<fieldset>
    <legend>Address</legend>
    <f:field bean="person" property="address.street"/>
    <f:field bean="person" property="address.city"/>
    <f:field bean="person" property="address.country"/>
</fieldset>
{code}

h3. Attributes

{table}
*Name* | *Required?* | *Description*
*bean* | if not inside _f:with_ | The bean whose property is being rendered. This can be the object itself or the name of a page-scope variable.
*except* | | A comma-separated list of properties that should be skipped (in addition to the defaults).
{table}

h2. f:with

Places a bean in scope so that the bean attribute can be omitted on contained tags. For example:

{code}
<f:with bean="person">
    <f:field property="name"/>
    <f:field property="address.city"/>
</f:with>
{code}

h3. Attributes

{table}
*Name* | *Required?* | *Description*
*bean* | yes | The bean whose property is being rendered. This can be the object itself or the name of a page-scope variable.
{table}
